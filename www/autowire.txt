
Autowirable Types
=================

 The following classes & interfaces can be used as type-hints when autowiring:
 
 App\Controller\Admin\DashboardController
 
 App\Controller\Admin\PagePostCrudController
 
 App\Controller\HomeController
 
 App\Kernel (kernel)
 
 App\Repository\GoogleTokenStorageRepository
 
 App\Repository\PagePostRepository
 
 App\Repository\YtCategoriesRepository
 
 App\Repository\YtChannelsRepository
 
 App\Repository\YtVideosRepository
 
 @internal
 Doctrine\Bundle\DoctrineBundle\Controller\ProfilerController
 
 Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider
 
 Interface for annotation readers.
 Doctrine\Common\Annotations\Reader (annotations.cached_reader)
 
 Doctrine\Common\Persistence\ManagerRegistry (doctrine)
 
 A database abstraction-level connection that implements features like events, transaction isolation levels, configuration, emulated transaction nesting, lazy connecting and more.
 Doctrine\DBAL\Connection (doctrine.dbal.default_connection)
 Doctrine\DBAL\Connection $defaultConnection (doctrine.dbal.default_connection)
 
 Connection interface. Driver connections must implement this interface.
 Doctrine\DBAL\Driver\Connection (doctrine.dbal.default_connection)
 
 Task for executing arbitrary SQL that can come from a file or directly from the command line.
 Doctrine\DBAL\Tools\Console\Command\RunSqlCommand
 
 EntityManager interface
 Doctrine\ORM\EntityManagerInterface (doctrine.orm.default_entity_manager)
 Doctrine\ORM\EntityManagerInterface $defaultEntityManager (doctrine.orm.default_entity_manager)
 
 Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.
 Doctrine\Persistence\ManagerRegistry (doctrine)
 
 EasyCorp\Bundle\EasyAdminBundle\ArgumentResolver\AdminContextResolver (debug.EasyCorp\Bundle\EasyAdminBundle\ArgumentResolver\AdminContextResolver)
 
 EasyCorp\Bundle\EasyAdminBundle\ArgumentResolver\BatchActionDtoResolver (debug.EasyCorp\Bundle\EasyAdminBundle\ArgumentResolver\BatchActionDtoResolver)
 
 EasyCorp\Bundle\EasyAdminBundle\Cache\CacheWarmer
 
 Generates the PHP class needed to define a Dashboard controller.
 EasyCorp\Bundle\EasyAdminBundle\Command\MakeAdminDashboardCommand
 
 Generates the PHP class needed to define a CRUD controller.
 EasyCorp\Bundle\EasyAdminBundle\Command\MakeCrudControllerCommand
 
 This subscriber acts as a "proxy" of all backend requests. First, if the request is related to EasyAdmin, it creates the AdminContext variable and stores it in the Request as an attribute.
 EasyCorp\Bundle\EasyAdminBundle\EventListener\AdminRouterSubscriber
 
 EasyCorp\Bundle\EasyAdminBundle\EventListener\CrudResponseListener
 
 This listener allows to display customized error pages in the production environment.
 EasyCorp\Bundle\EasyAdminBundle\EventListener\ExceptionListener
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\ActionFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\AdminContextFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\ControllerFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\EntityFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\FieldFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\FilterFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\FormFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\MenuFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Factory\PaginatorFactory
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\ArrayConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\AssociationConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\AvatarConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\BooleanConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\ChoiceConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CodeEditorConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CollectionConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CommonPostConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CommonPreConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CountryConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\CurrencyConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\DateTimeConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\EmailConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\FormConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\IdConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\ImageConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\IntegerConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\LanguageConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\LocaleConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\MoneyConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\NumberConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\PercentConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\SlugConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\TelephoneConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\TextConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\TextEditorConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\TimezoneConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Field\Configurator\UrlConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\ChoiceConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\CommonConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\ComparisonConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\DateTimeConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\EntityConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\NullConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\NumericConfigurator
 
 EasyCorp\Bundle\EasyAdminBundle\Filter\Configurator\TextConfigurator
 
 Extension that allows using collection_entry_* blocks in form themes. This is the same code added in https://github.com/symfony/symfony/pull/36088 which is only available when using Symfony 5.1 or higher.
 EasyCorp\Bundle\EasyAdminBundle\Form\Extension\CollectionTypeExtension
 
 Extension that injects EasyAdmin related information in the view used to render the form.
 EasyCorp\Bundle\EasyAdminBundle\Form\Extension\EaCrudFormTypeExtension
 
 Custom form type that deals with some of the logic used to render the forms used to create and edit EasyAdmin entities.
 EasyCorp\Bundle\EasyAdminBundle\Form\Type\CrudFormType
 
 EasyCorp\Bundle\EasyAdminBundle\Form\Type\FileUploadType
 
 EasyCorp\Bundle\EasyAdminBundle\Form\Type\FiltersFormType
 
 Collects information about the requests related to EasyAdmin and displays it both in the web debug toolbar and in the profiler.
 EasyCorp\Bundle\EasyAdminBundle\Inspector\DataCollector
 
 Copied from https://github.com/twigphp/intl-extra/blob/2.x/src/IntlExtension.php (c) Fabien Potencier - MIT License.
 EasyCorp\Bundle\EasyAdminBundle\Intl\IntlFormatter
 
 EasyCorp\Bundle\EasyAdminBundle\Maker\ClassMaker
 
 EasyCorp\Bundle\EasyAdminBundle\Orm\EntityPaginator
 
 EasyCorp\Bundle\EasyAdminBundle\Orm\EntityRepository
 
 EasyCorp\Bundle\EasyAdminBundle\Orm\EntityUpdater
 
 Inject this in services that need to get the admin context object.
 EasyCorp\Bundle\EasyAdminBundle\Provider\AdminContextProvider
 
 EasyCorp\Bundle\EasyAdminBundle\Provider\FieldProvider
 
 EasyCorp\Bundle\EasyAdminBundle\Registry\CrudControllerRegistry
 
 EasyCorp\Bundle\EasyAdminBundle\Registry\DashboardControllerRegistry
 
 EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator
 
 This class is entirely based on Symfony\Component\HttpKernel\UriSigner. (c) Fabien Potencier <fabien@symfony.com> - MIT License.
 EasyCorp\Bundle\EasyAdminBundle\Router\UrlSigner
 
 A slightly modified authorization checker optimized for performance and which doesn't trigger exceptions when security is not enabled.
 EasyCorp\Bundle\EasyAdminBundle\Security\AuthorizationChecker
 
 EasyCorp\Bundle\EasyAdminBundle\Security\SecurityVoter
 
 Defines the filters and functions used to render the bundle's templates.
 EasyCorp\Bundle\EasyAdminBundle\Twig\EasyAdminTwigExtension
 
 CacheItemPoolInterface generates CacheItemInterface objects.
 Psr\Cache\CacheItemPoolInterface (cache.app)
 
 Psr\Container\ContainerInterface $parameterBag (parameter_bag)
 
 Defines a dispatcher for events.
 Psr\EventDispatcher\EventDispatcherInterface (debug.event_dispatcher)
 
 Describes a logger instance.
 Psr\Log\LoggerInterface (logger)
 
 SessionHandlerInterface (session.handler.native_file)
 
 Redirects a request to another URL.
 Symfony\Bundle\FrameworkBundle\Controller\RedirectController
 
 TemplateController.
 Symfony\Bundle\FrameworkBundle\Controller\TemplateController
 
 Helps manage asset URLs.
 Symfony\Component\Asset\Packages (assets.packages)
 
 ContainerBagInterface is the interface implemented by objects that manage service container parameters.
 Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface (parameter_bag)
 
 ParameterBagInterface is the interface implemented by objects that manage service container parameters.
 Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface (parameter_bag)
 
 Turns public and "container.reversible" services back to their ids.
 Symfony\Component\DependencyInjection\ReverseContainer (reverse_container)
 
 The EventDispatcherInterface is the central point of Symfony's event listener system. Listeners are registered on the manager and events are dispatched through the manager.
 Symfony\Component\EventDispatcher\EventDispatcherInterface (debug.event_dispatcher)
 
 Provides basic utility to manipulate the file system.
 Symfony\Component\Filesystem\Filesystem (filesystem)
 
 Allows creating a form based on a name, a class or a property.
 Symfony\Component\Form\FormFactoryInterface (form.factory)
 
 The central registry of the Form component.
 Symfony\Component\Form\FormRegistryInterface (form.registry)
 
 Creates ResolvedFormTypeInterface instances.
 Symfony\Component\Form\ResolvedFormTypeFactoryInterface (form.resolved_type_factory)
 
 Request stack that controls the lifecycle of requests.
 Symfony\Component\HttpFoundation\RequestStack (request_stack)
 
 A helper service for manipulating URLs within and outside the request scope.
 Symfony\Component\HttpFoundation\UrlHelper (url_helper)
 
 FileLocator uses the KernelInterface to locate resources in bundles.
 Symfony\Component\HttpKernel\Config\FileLocator (file_locator)
 
 Formats debug file links.
 Symfony\Component\HttpKernel\Debug\FileLinkFormatter (debug.file_link_formatter)
 
 Interface implemented by rendering strategies able to generate an URL for a fragment.
 Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface (fragment.uri_generator)
 
 Interface implemented by HTTP cache stores.
 Symfony\Component\HttpKernel\HttpCache\StoreInterface (http_cache.store)
 
 HttpKernelInterface handles a Request to convert it to a Response.
 Symfony\Component\HttpKernel\HttpKernelInterface (http_kernel)
 
 The Kernel is the heart of the Symfony system.
 Symfony\Component\HttpKernel\KernelInterface (kernel)
 
 Signs URIs.
 Symfony\Component\HttpKernel\UriSigner (uri_signer)
 
 PasswordHasherFactoryInterface to support different password hashers for different user accounts.
 Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactoryInterface (security.password_hasher_factory)
 
 Interface for the user password hasher service.
 Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface (security.user_password_hasher)
 
 Writes and reads values to/from an object/array graph.
 Symfony\Component\PropertyAccess\PropertyAccessorInterface (property_accessor)
 
 Guesses if the property can be accessed or mutated.
 Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface (property_info)
 
 Guesses the property's human readable description.
 Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface (property_info)
 
 Gets info about PHP class properties.
 Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface (property_info)
 
 Guesses if the property can be initialized through the constructor.
 Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface (property_info)
 
 Extracts the list of properties available for the given class.
 Symfony\Component\PropertyInfo\PropertyListExtractorInterface (property_info)
 
 Extract read information for the property of a class.
 Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface (property_info.reflection_extractor)
 
 Type Extractor Interface.
 Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface (property_info)
 
 Extract write information for the property of a class.
 Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface (property_info.reflection_extractor)
 
 UrlGeneratorInterface is the interface that all URL generator classes must implement.
 Symfony\Component\Routing\Generator\UrlGeneratorInterface (router.default)
 
 UrlMatcherInterface is the interface that all URL matcher classes must implement.
 Symfony\Component\Routing\Matcher\UrlMatcherInterface (router.default)
 
 Holds information about the current request.
 Symfony\Component\Routing\RequestContext (router.request_context)
 
 Symfony\Component\Routing\RequestContextAwareInterface (router.default)
 
 RouterInterface is the interface that all Router classes must implement.
 Symfony\Component\Routing\RouterInterface (router.default)
 
 The TokenStorageInterface.
 Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface (security.token_storage)
 
 AccessDecisionManagerInterface makes authorization decisions.
 Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface (debug.security.access.decision_manager)
 
 The AuthorizationCheckerInterface.
 Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface (security.authorization_checker)
 
 RoleHierarchyInterface is the interface for a role hierarchy.
 Symfony\Component\Security\Core\Role\RoleHierarchyInterface (security.role_hierarchy)
 
 Helper class for commonly-needed security tasks.
 Symfony\Component\Security\Core\Security (security.helper)
 
 Implement to throw AccountStatusException during the authentication process.
 Symfony\Component\Security\Core\User\UserCheckerInterface (security.user_checker)
 
 Represents a class that loads UserInterface objects from some source for the authentication system.
 Symfony\Component\Security\Core\User\UserProviderInterface (security.user.provider.concrete.users_in_memory)
 
 Manages CSRF tokens.
 Symfony\Component\Security\Csrf\CsrfTokenManagerInterface (security.csrf.token_manager)
 
 Generates CSRF tokens.
 Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface (security.csrf.token_generator)
 
 Stores CSRF tokens.
 Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface (security.csrf.token_storage)
 
 Extracts Security Errors from Request.
 Symfony\Component\Security\Http\Authentication\AuthenticationUtils (security.authentication_utils)
 
 Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface (security.user_authenticator)
 
 Firewall uses a FirewallMap to register security listeners for the given request.
 Symfony\Component\Security\Http\Firewall (debug.security.firewall)
 
 This interface must be implemented by firewall maps.
 Symfony\Component\Security\Http\FirewallMapInterface (security.firewall.map)
 
 Encapsulates the logic needed to create sub-requests, redirect the user, and match URLs.
 Symfony\Component\Security\Http\HttpUtils (security.http_utils)
 
 SessionAuthenticationStrategyInterface.
 Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface (security.authentication.session_strategy)
 
 Stopwatch provides a way to profile code.
 Symfony\Component\Stopwatch\Stopwatch (debug.stopwatch)
 
 Creates a URL-friendly slug from a given string.
 Symfony\Component\String\Slugger\SluggerInterface (slugger)
 
 Extracts translation messages from a directory or files to the catalogue. New found messages are injected to the catalogue using the prefix.
 Symfony\Component\Translation\Extractor\ExtractorInterface (translation.extractor)
 
 Symfony\Component\Translation\LocaleSwitcher (translation.locale_switcher)
 
 TranslationReader reads translation messages from translation files.
 Symfony\Component\Translation\Reader\TranslationReaderInterface (translation.reader)
 
 TranslationWriter writes translation messages.
 Symfony\Component\Translation\Writer\TranslationWriterInterface (translation.writer)
 
 Symfony\Component\Uid\Factory\NameBasedUuidFactory (name_based_uuid.factory)
 
 Symfony\Component\Uid\Factory\RandomBasedUuidFactory (random_based_uuid.factory)
 
 Symfony\Component\Uid\Factory\TimeBasedUuidFactory (time_based_uuid.factory)
 
 Symfony\Component\Uid\Factory\UlidFactory (ulid.factory)
 
 Symfony\Component\Uid\Factory\UuidFactory (uuid.factory)
 
 Validates PHP values against constraints.
 Symfony\Component\Validator\Validator\ValidatorInterface (debug.validator)
 
 Covers most simple to advanced caching needs.
 Symfony\Contracts\Cache\CacheInterface (cache.app)
 
 Allows invalidating cached items using tags.
 Symfony\Contracts\Cache\TagAwareCacheInterface (cache.app.taggable)
 
 Allows providing hooks on domain-specific lifecycles by dispatching events.
 Symfony\Contracts\EventDispatcher\EventDispatcherInterface (debug.event_dispatcher)
 
 Symfony\Contracts\Translation\LocaleAwareInterface (translation.locale_switcher)
 
 Symfony\Contracts\Translation\TranslatorInterface (translator.data_collector)
 
 Stores the Twig configuration and renders templates.
 Twig\Environment (twig)
 
 service_locator_EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator

 Pro-tip: use interfaces in your type-hints instead of classes to benefit from the dependency inversion principle.

